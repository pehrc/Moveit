{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Correia-PC\\\\Documents\\\\Projects\\\\Moveit\\\\src\\\\contexts\\\\CountDownContex.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"cVu0hsDf1rnm10+qbfS96WIdEJo=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/Correia-PC/Documents/Projects/Moveit/src/contexts/CountDownContex.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBAExCP,UAAU,CAACG,iBAAD,CAF8B;AAAA,MAE9DK,iBAF8D,eAE9DA,iBAF8D;;AAAA,kBAI9CN,QAAQ,CAAC,MAAM,EAAP,CAJsC;AAAA,MAI/DO,IAJ+D;AAAA,MAIzDC,OAJyD;;AAAA,mBAKtCR,QAAQ,CAAC,KAAD,CAL8B;AAAA,MAK/DS,QAL+D;AAAA,MAKrDC,WALqD;;AAAA,mBAMhCV,QAAQ,CAAC,KAAD,CANwB;AAAA,MAM/DW,WAN+D;AAAA,MAMlDC,cANkD;;AAQtE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGU,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAyB;AACvBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCM,MAAAA,OAAO,EAAPA,OADgC;AAEhCG,MAAAA,OAAO,EAAPA,OAFgC;AAGhCL,MAAAA,WAAW,EAAXA,WAHgC;AAIhCF,MAAAA,QAAQ,EAARA,QAJgC;AAKhCQ,MAAAA,cAAc,EAAdA,cALgC;AAMhCC,MAAAA,cAAc,EAAdA;AANgC,KAAlC;AAAA,cAQIb;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA9CeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  startCountdown: () => void;\r\n  resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nlet countdownTimeout: NodeJS.Timeout\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  \r\n  const { startNewChallenge } = useContext(ChallengesContext)\r\n\r\n  const [time, setTime] = useState(0.1 * 60)\r\n  const [isActive, setIsActive] = useState(false)\r\n  const [hasFinished, setHasFinished] = useState(false)\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  function startCountdown() {\r\n    setIsActive(true)\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60)\r\n    setHasFinished(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1)\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true)\r\n      setIsActive(false)\r\n      startNewChallenge()\r\n    }\r\n  }, [isActive, time])\r\n  \r\n  return (\r\n    <CountdownContext.Provider value={{\r\n      minutes, \r\n      seconds, \r\n      hasFinished, \r\n      isActive, \r\n      startCountdown, \r\n      resetCountdown\r\n      }}>\r\n      { children }\r\n    </CountdownContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}