{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Correia-PC\\\\Documents\\\\Projects\\\\Moveit\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useCallback, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  const levelUp = useCallback(() => {\n    setLevel(level + 1);\n  }, []);\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenger() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenger\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Correia-PC/Documents/Projects/Moveit/src/contexts/ChallengesContext.tsx"],"names":["createContext","useCallback","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenger","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,QAArC,QAAgE,OAAhE;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAK;AAAA,OAACC,KAAD;AAAA,OAASC;AAAT,MAAqBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAK;AAAA,OAACO,iBAAD;AAAA,OAAqBC;AAArB,MAA6CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAK;AAAA,OAACS,mBAAD;AAAA,OAAuBC;AAAvB,MAAiDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEA,QAAMW,OAAO,GAAGjB,WAAW,CAAC,MAAM;AAChCO,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAF0B,EAEzB,EAFyB,CAA3B;;AAIA,WAASY,iBAAT,GAA4B;AAC1B,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAAyB;AACvBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASY,kBAAT,GAA6B;AAC3B,QAAI,CAACb,eAAL,EAAqB;AACnB;AACD;;AACD,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB;AACA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAACpB,MAAAA,KAAD;AAAQE,MAAAA,iBAAR;AAA2BE,MAAAA,mBAA3B;AAAgDI,MAAAA,qBAAhD;AAAuEG,MAAAA,OAAvE;AAAgFC,MAAAA,iBAAhF;AAAmGN,MAAAA,eAAnG;AAAoHY,MAAAA,cAApH;AAAoIC,MAAAA;AAApI,KAAnC;AAAA,cACCpB;AADD;AAAA;AAAA;AAAA;AAAA,UADF;AAKD","sourcesContent":["import { createContext, useCallback, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n  type: 'body' | 'eye';\r\n  description: string;\r\n  amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  level: number;\r\n  challengesCompleted: number;\r\n  currentExperience: number;\r\n  activeChallenge: Challenge;\r\n  experienceToNextLevel: number;\r\n  levelUp: () => void;\r\n  startNewChallenge: () => void;\r\n  resetChallenge: () => void;\r\n  completeChallenger: () => void;\r\n}\r\n\r\n\r\ninterface ChallengensProviderProps{\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData)\r\n\r\nexport function ChallengesProvider({ children }: ChallengensProviderProps){\r\n  const[level , setLevel] = useState(1);\r\n  const[currentExperience , setCurrentExperience] = useState(0);\r\n  const[challengesCompleted , setChallengesCompleted] = useState(0);\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n  const levelUp = useCallback(() => {\r\n    setLevel(level + 1);\r\n  },[])\r\n\r\n  function startNewChallenge(){\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n    const challenge = challenges[randomChallengeIndex];\r\n\r\n    setActiveChallenge(challenge)\r\n  }\r\n\r\n  function resetChallenge(){\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function completeChallenger(){\r\n    if (!activeChallenge){\r\n      return;\r\n    }\r\n    const { amount } = activeChallenge;\r\n    let finalExperience = currentExperience + amount;\r\n  }\r\n  \r\n  return(\r\n    <ChallengesContext.Provider value={{level, currentExperience, challengesCompleted, experienceToNextLevel, levelUp, startNewChallenge, activeChallenge, resetChallenge, completeChallenger }}>\r\n    {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}