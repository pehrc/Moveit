{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Correia-PC\\\\Documents\\\\Projects\\\\Moveit\\\\src\\\\contexts\\\\CountDownContex.tsx\";\nimport { createContext, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nconst {\n  startNewChallenge\n} = useContext(ChallengesContext);\nconst {\n  0: time,\n  1: setTime\n} = useState(0.1 * 60);\nconst {\n  0: isActive,\n  1: setIsActive\n} = useState(false);\nconst {\n  0: hasFinished,\n  1: setHasFinished\n} = useState(false);\nconst minutes = Math.floor(time / 60);\nconst seconds = time % 60;\nconst startCountdown = useCallback(() => {\n  setIsActive(true);\n}, []);\nconst resetCountdown = useCallback(() => {\n  clearTimeout(countdownTimeout);\n  setIsActive(false);\n  setTime(0.1 * 60);\n}, []);\nuseEffect(() => {\n  if (isActive && time > 0) {\n    countdownTimeout = setTimeout(() => {\n      setTime(time - 1);\n    }, 1000);\n  } else if (isActive && time === 0) {\n    setHasFinished(true);\n    setIsActive(false);\n    startNewChallenge();\n  }\n}, [isActive, time]);\nexport function CountdownProvider({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Correia-PC/Documents/Projects/Moveit/src/contexts/CountDownContex.tsx"],"names":["createContext","useCallback","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout","CountdownProvider","children"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4DC,SAA5D,EAAuEC,QAAvE,QAAuF,OAAvF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIO,gBAAJ;AAEA,MAAO;AAAEC,EAAAA;AAAF,IAAwBN,UAAU,CAACG,iBAAD,CAAzC;AAEA,MAAM;AAAA,KAAEI,IAAF;AAAA,KAASC;AAAT,IAAqBN,QAAQ,CAAC,MAAM,EAAP,CAAnC;AACA,MAAM;AAAA,KAAEO,QAAF;AAAA,KAAYC;AAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAM;AAAA,KAAES,WAAF;AAAA,KAAgBC;AAAhB,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AAEA,MAAMW,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAGA,MAAMU,cAAc,GAAGlB,WAAW,CAAC,MAAM;AACrCW,EAAAA,WAAW,CAAC,IAAD,CAAX;AACD,CAF+B,EAE9B,EAF8B,CAAlC;AAIE,MAAMQ,cAAc,GAAGnB,WAAW,CAAC,MAAM;AACvCoB,EAAAA,YAAY,CAACd,gBAAD,CAAZ;AACAK,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,EAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD,CAJiC,EAIhC,EAJgC,CAAlC;AAMAP,SAAS,CAAC,MAAM;AACd,MAAGQ,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AACtBF,IAAAA,gBAAgB,GAAGe,UAAU,CAAC,MAAM;AAClCZ,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,KAF4B,EAE1B,IAF0B,CAA7B;AAGD,GAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,IAAAA,iBAAiB;AAClB;AACF,CAVQ,EAUP,CAACG,QAAD,EAAYF,IAAZ,CAVO,CAAT;AAaF,OAAO,SAASc,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AACzC,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACT,MAAAA,OAAD;AAAUG,MAAAA,OAAV;AAAmBL,MAAAA,WAAnB;AAAgCF,MAAAA,QAAhC;AAA0CQ,MAAAA,cAA1C;AAA0DC,MAAAA;AAA1D,KAAlC;AAAA,cACCI;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH","sourcesContent":["import { createContext, ReactNode, useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps{\r\n    children: ReactNode;\r\n  }\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData )\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nconst  { startNewChallenge } = useContext(ChallengesContext);\r\n\r\nconst [ time , setTime ] = useState(0.1 * 60)\r\nconst [ isActive, setIsActive ] = useState(false)\r\nconst [ hasFinished , setHasFinished] = useState(false)\r\n\r\nconst minutes = Math.floor(time / 60)\r\nconst seconds = time % 60;\r\n\r\n\r\nconst startCountdown = useCallback(() => {\r\n    setIsActive(true)\r\n  },[])\r\n\r\n  const resetCountdown = useCallback(() => {\r\n    clearTimeout(countdownTimeout)\r\n    setIsActive(false)\r\n    setTime(0.1 * 60)\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    if(isActive && time > 0){\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge();\r\n    }\r\n  },[isActive , time])\r\n\r\n\r\nexport function CountdownProvider({children}){\r\n    return(\r\n        <CountdownContext.Provider value={{minutes, seconds, hasFinished, isActive, startCountdown, resetCountdown}}>\r\n        {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}